buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}

plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '2.7.16'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'com.github.node-gradle.node' version '3.1.0'
	id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'
	id "org.sonarqube" version '3.0'
}

group = 'com.studyolle'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

sonarqube {
	properties {
		property 'sonar.host.url', 'http://15.165.66.152:9000'  // SonarQube 서버 URL
		property 'sonar.login', 'squ_f2564cfcb5f22d0312218d5a508f2521ead4240c'  // SonarQube 로그인 토큰
	}
}

jacoco {
    toolVersion = "0.8.8"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

tasks.jacocoTestReport {
    reports {
        xml.required.set(false)
        csv.required.set(true)
        csv.outputLocation.set(layout.buildDirectory.file('customJacocoReportDir/jacocoTestReport.csv'))
        html.required.set(true)
        html.outputLocation.set(layout.buildDirectory.dir('customJacocoReportDir/jacocoHtml'))
    }
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	gradlePluginPortal()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.8'
	testImplementation 'com.tngtech.archunit:archunit-junit5-api:0.13.1'
	testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
	testImplementation "org.testcontainers:postgresql:1.19.3"
	testImplementation "org.testcontainers:junit-jupiter:1.19.3"
	implementation  "com.github.node-gradle:gradle-node-plugin:3.1.0"

}

test {
	useJUnitPlatform()
	reports {
	        junitXml.required.set(true)
	        // Correct: setting a file for junitXml.outputLocation
	        junitXml.outputLocation.set(layout.buildDirectory.file('test-results/test-results.xml'))
	        html.required.set(true)
	        // Correct: setting a directory for html.outputLocation
	        html.outputLocation.set(layout.buildDirectory.dir('test-results/test-html'))
	}
}


node {
	version = '18.18.2'
	download = true
	npmVersion = ""
	yarnVersion = ""
	distBaseUrl = "https://nodejs.org/dist"
	npmInstallCommand = "install"
	workDir = file("${project.projectDir}/.gradle/nodejs")
	npmWorkDir = file("${project.projectDir}/.gradle/npm")
	yarnWorkDir = file("${project.projectDir}/.gradle/yarn")
	nodeProjectDir = file("${project.projectDir}/src/main/resources/static")
	nodeProxySettings = ProxySettings.SMART
}

processResources.dependsOn('npmInstall')

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}

sourceSets {
	main.java.srcDir querydslDir
}

configurations {
	querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}
